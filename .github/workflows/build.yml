name: build

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  validation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20.x']
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      - run: npm ci
      - name: Check formatting
        run: npm run format:check
      - name: Lint check
        run: npm run lint:check
      - name: Run tests with coverage
        run: npm test -- --coverage

  check-version:
    runs-on: ubuntu-latest
    needs: validation
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Check if version has been incremented compared to main branch
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          git fetch origin main
          git checkout origin/main -- package.json
          MAIN_VERSION=$(node -p "require('./package.json').version")
          git checkout -- package.json
          
          if [ "$(printf '%s\n' "$CURRENT_VERSION" "$MAIN_VERSION" | sort -V | head -n1)" = "$MAIN_VERSION" ] && [ "$CURRENT_VERSION" != "$MAIN_VERSION" ]; then
            echo "Version in package.json ($CURRENT_VERSION) is higher than on the main branch ($MAIN_VERSION)."
          else
            echo "Error: Version in package.json ($CURRENT_VERSION) is not higher than on the main branch ($MAIN_VERSION)."
            exit 1
          fi

  check-changelog:
    runs-on: ubuntu-latest
    needs: check-version
    steps:
      - uses: actions/checkout@v4
      - name: Check if CHANGELOG.md has been updated
        run: |
          VERSION_IN_PACKAGE_JSON=$(node -p "require('./package.json').version")

          if ! grep -qE "## \[?$VERSION_IN_PACKAGE_JSON\]?" CHANGELOG.md; then
          echo "Error: CHANGELOG.md has not been updated for version $VERSION_IN_PACKAGE_JSON."
          exit 1
          else
          echo "CHANGELOG.md has been updated for version $VERSION_IN_PACKAGE_JSON."
          fi
